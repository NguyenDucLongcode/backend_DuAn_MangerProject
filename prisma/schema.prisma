// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum UserRoleEnum {
    CUSTOMER
    ADMIN
    LEADER
    CODER
}

enum GroupVisibilityEnum {
    PRIVATE
    PUBLIC
    RESTRICTED
}

enum TaskStatus {
    PENDING
    IN_PROGRESS
    COMPLETED
}

enum PaymentStatus {
    PENDING
    COMPLETED
    FAILED
}

enum SubscriptionPlan {
    FREE
    BASIC
    PRO
    ENTERPRISE
}

// USERS & AUTHENTICATION
model User {
    id         String   @id @default(uuid())                  // Khóa chính
    name       String?                                        // Tên User
    email      String     @unique                             // Email user  (duy nhất)
    password   String                                         // Mật khẩu user
    phone      String?    @unique                             // SDT (duy nhất)
    address    String?                                        // Địa chỉ
    gender     String?                                        // Giới tính
    role       UserRoleEnum @default(CUSTOMER)                // Vị trí user (mặc định là customer)
    isActive   Boolean   @default(false)                      // Trạng thái xác thực email
    createdAt  DateTime  @default(now())                      // Ngày tạo user
    
    // Quan hệ với các nhóm mà người dùng quản lý (Lãnh đạo nhóm)
    managedGroups  GroupLeader[] 
     
    // Quan hệ với các nhóm mà người dùng là thành viên
    memberGroups   GroupMember[] 
      
    // Quan hệ với các refresh tokens để duy trì phiên làm việc
    refreshTokens RefreshToken[]   
   
    // Quan hệ với các đơn hàng mà người dùng đã thực hiện
    orders         Order[]  
   
    // Quan hệ với gói đăng ký của người dùng (mỗi người dùng chỉ có một gói)
    subscriptions  Subscription?  

    // Quan hệ với các công việc mà người dùng được giao (công việc có thể chưa hoàn thành hoặc đã hoàn thành)
    tasks          Task[] @relation("TaskAssignee")  

    // Quan hệ với các tin nhắn mà người dùng đã gửi đi
    messagesSent    Message[] @relation("UserMessages")

     // Quan hệ với các tin nhắn mà người dùng đã nhận
    messagesReceived Message[] @relation("PrivateMessages")
    
    // Quan hệ với các thông báo dành cho người dùng
    notifications  Notification[]  // Quan hệ ngược với notifications
    
    // Quan hệ với các đánh giá mà người dùng đã thực hiện cho các dự án
    reviews         Review[]  
}

model RefreshToken {
    id             String   @id @default(uuid())                // Khóa chính, tự động tăng
    userId         String    @unique                            // Mỗi user chỉ có một refresh token duy nhất
    token          String                                       // Giá trị của refresh token
    expiresAt      DateTime                                     // Thời gian token hết hạn
   
   // Quan hệ với User: Mỗi RefreshToken thuộc về một User cụ thể
   user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// GROUP MANAGEMENT
model GroupDev {
    id            String   @id @default(uuid())              // Khóa chính
    name          String                                     // Tên nhóm
    description   String?                                    // Mô tả nhóm (tuỳ chọn)
    visibility    GroupVisibilityEnum @default(PRIVATE)      // Chế độ hiển thị nhóm (private, public, restricted)
    maxMembers    Int?                                       // Số lượng thành viên tối đa (tuỳ chọn)
    createdAt     DateTime @default(now())                   // Thời gian nhóm được tạo
    
    // Quan hệ với các lãnh đạo nhóm (GroupLeader)
    leaders     GroupLeader[]

    // Quan hệ với các thành viên nhóm (GroupMember)
    members     GroupMember[]

    // Quan hệ với các dự án (Project) trong nhóm
    projects    Project[]

    // Quan hệ với các tin nhắn trong nhóm (Message)
    messages    Message[] @relation("GroupMessages")
}

model GroupLeader {
    id           String   @id @default(uuid())             // Khóa chính
    groupId      String                                    // Mã nhóm mà người lãnh đạo thuộc về
    userId       String                                    // Mã người dùng (User) là lãnh đạo của nhóm
    createdAt    DateTime @default(now())                  // Thời gian tạo khi người dùng được chỉ định làm lãnh đạo nhóm
    
    // Quan hệ với GroupDev: Mỗi GroupLeader thuộc về một GroupDev (nhóm phát triển)
    group     GroupDev @relation(fields: [groupId], references: [id], onDelete: Cascade)

    // Quan hệ với User: Mỗi GroupLeader là một User, và mỗi User có thể là lãnh đạo của nhiều nhóm
    user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    // Đảm bảo rằng mỗi người dùng chỉ có thể là lãnh đạo của một nhóm duy nhất (groupId, userId phải duy nhất)
    @@unique([groupId, userId])
}

model GroupMember {
    id        String   @id @default(uuid())               // Khóa chính
    groupId   String                                         // Mã nhóm mà thành viên thuộc về
    userId    String                                         // Mã người dùng (User) là thành viên của nhóm
    joinedAt  DateTime @default(now())                    // Thời gian tham gia nhóm
    
    // Quan hệ với GroupDev: Mỗi thành viên thuộc về một GroupDev (nhóm phát triển)
    group     GroupDev @relation(fields: [groupId], references: [id], onDelete: Cascade)

    // Quan hệ với User: Mỗi thành viên là một User, và mỗi User có thể là thành viên của nhiều nhóm
    user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    // Đảm bảo rằng mỗi người dùng chỉ có thể tham gia một nhóm duy nhất (groupId, userId phải duy nhất)
    @@unique([groupId, userId])
}

// SUBSCRIPTIONS
model Subscription {
    id         String   @id @default(uuid())             // Khóa chính
    userId     String      @unique                          // Mỗi người dùng có một subscription duy nhất
    plan       SubscriptionPlan                          // Gói đăng ký của người dùng (Free, Basic, Pro,ENTERPRISE)
    expiresAt  DateTime                                  // Thời gian hết hạn của đăng ký
    price      Float                                     // Giá gói đăng ký
    createdAt  DateTime @default(now())                  // Thời gian người dùng đăng ký
    
    // Quan hệ với User: Mỗi Subscription thuộc về một User cụ thể
    user       User     @relation(fields: [userId], references: [id])
    
    // Đảm bảo mỗi User chỉ có một Subscription cho mỗi plan (Gói)
    @@unique([userId, plan]) // Đảm bảo mỗi User chỉ có một Subscription cho từng Plan
}

// ORDER & PAYMENT
model Order {
    id            String   @id @default(uuid())               // Khóa chính
    userId        String                                        // Mã người dùng (User) đã tạo đơn hàng
    totalAmount   Float                                     // Tổng tiền của đơn hàng
    createdAt     DateTime @default(now())                   // Thời gian tạo đơn hàng
    
    // Quan hệ với User: Mỗi đơn hàng thuộc về một người dùng
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    // Quan hệ với Payment: Một Order có thể có một Payment
    payment    Payment?
}

model Payment {
    id         String   @id @default(uuid())                  // Khóa chính
    orderId    String      @unique                               // Mã đơn hàng (Order) mà thanh toán này thuộc về
    amount     Float                                          // Số tiền thanh toán
    method     String                                         // Phương thức thanh toán (ví dụ: thẻ tín dụng, PayPal, chuyển khoản)
    status     PaymentStatus @default(PENDING)                // Trạng thái thanh toán (Chờ xử lý, Đã thanh toán, Hủy)
    createdAt  DateTime @default(now())                       // Thời gian tạo thanh toán
    
    // Quan hệ với Order: Mỗi Payment thuộc về một Order
    order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

// PROJECTS & TASKS
model Project {
    id           String   @id @default(uuid())                // Khóa chính
    groupId      String                                         // Mã nhóm (GroupDev) mà dự án thuộc về
    name         String                                      // Tên dự án
    description  String?                                    // Mô tả dự án
    createdAt    DateTime @default(now())                    // Thời gian tạo dự án
    
    // Quan hệ với GroupDev: Mỗi dự án thuộc về một nhóm phát triển (GroupDev)
    group      GroupDev @relation(fields: [groupId], references: [id], onDelete: Cascade)

    // Quan hệ với Task: Một dự án có thể có nhiều nhiệm vụ
    tasks      Task[]

    // Các tệp đính kèm của dự án
    files      File[]

    // Các đánh giá của dự án
    reviews    Review[]
}

model Task {
    id           String   @id @default(uuid())              // Khóa chính
    projectId    String                                     // Mã dự án (Project) mà nhiệm vụ này thuộc về
    assignedTo   String?                                    // Mã người dùng (User) được giao nhiệm vụ (optional)                            
    title        String                                     // Tiêu đề nhiệm vụ
    description  String?                                   // Mô tả nhiệm vụ
    status       TaskStatus @default(PENDING)               // Trạng thái nhiệm vụ (Chờ xử lý, Đang làm, Hoàn thành)
    dueDate      DateTime?                                  // Hạn hoàn thành nhiệm vụ
    createdAt    DateTime @default(now())                   // Thời gian tạo nhiệm vụ
   
    // Quan hệ với Project: Mỗi nhiệm vụ thuộc về một dự án
    project    Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    // Quan hệ với User (assignee): Một nhiệm vụ có thể được giao cho một người dùng
    assignee   User?   @relation(fields: [assignedTo], references: [id], name: "TaskAssignee", onDelete: SetNull)
}

// CHAT SYSTEM
model Message {
    id         String   @id @default(uuid())       // Khóa chính
    senderId   String                                 // Mã người dùng (User) gửi tin nhắn
    receiverId String?                               // Mã người dùng (User) nhận tin nhắn (nếu có)
    groupId    String?                                // Mã nhóm (GroupDev) mà tin nhắn này thuộc về (nếu có)
    content    String                              // Nội dung tin nhắn
    createdAt DateTime @default(now())            // Thời gian gửi tin nhắn
   
   // Quan hệ với User (sender): Người gửi tin nhắn
    sender    User     @relation(fields: [senderId], references: [id], name: "UserMessages", onDelete: Cascade)

    // Quan hệ với User (receiver): Người nhận tin nhắn (nếu có)
    receiver  User?    @relation(fields: [receiverId], references: [id], name: "PrivateMessages", onDelete: Cascade)

    // Quan hệ với GroupDev: Tin nhắn trong nhóm (nếu có)
    group     GroupDev? @relation(fields: [groupId], references: [id], name: "GroupMessages", onDelete: Cascade)
}

// NOTIFICATIONS
model Notification {
    id        String   @id @default(uuid())        // Khóa chính
    userId    String                                  // Mã người dùng (User) nhận thông báo
    message   String                               // Nội dung thông báo
    read      Boolean @default(false)              // Trạng thái đã đọc hay chưa
    createdAt DateTime @default(now())             // Thời gian tạo thông báo
    
      // Quan hệ với User: Mỗi thông báo thuộc về một người dùng
    user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// FILE MANAGEMENT
model File {
    id        String   @id @default(uuid())              // Khóa chính
    projectId  String                                       // Mã dự án (Project) mà tệp này thuộc về
    filename   String                                    // Tên tệp
    fileType   String                                    // Loại tệp (ví dụ: "image/png", "application/pdf")
    size       String                                       // Kích thước tệp (bytes)
    url        String                                    // Đường dẫn tới tệp
    uploadedAt DateTime @default(now())                  // Thời gian tải tệp lên
   
    // Quan hệ với Project: Mỗi tệp thuộc về một dự án
    project    Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// PROJECT REVIEWS
model Review { 
    id        String   @id @default(uuid())       // Khóa chính
    projectId String                              // Mã dự án (Project) mà đánh giá này thuộc về
    userId    String                              // Mã người dùng (User) đã thực hiện đánh giá
    rating    Int                                 // Điểm đánh giá (1-5)
    comment   String?                             // Bình luận đánh giá
    createdAt DateTime @default(now())            // Thời gian tạo đánh giá
   
    // Quan hệ với Project: Mỗi đánh giá thuộc về một dự án
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    // Quan hệ với User: Mỗi đánh giá được tạo ra bởi một người dùng
    user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

